#!/bin/bash

# as an error when substituting.
set -o nounset


err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

ex_err() {
 err "$@"
 exit 100
}

function _check_required_programs() {

    # Required program(s)
    req_progs=(envsubst)
    for p in ${req_progs[@]}; do
	hash "${p}" 2>&- || \
	    { echo >&2 " Required program \"${p}\" not installed or in search PATH."; 
              exit 1; 
            }
    done    
}

function cleanup() {
    rm -f ${TMP_FILE_PREFIX}.*
     #echo "always implement this" && exit 100   
}


# declare -r CONSTANT_VARIABLE='value'
declare -r TMP_FILE_PREFIX=${TMPDIR:-/tmp}/prog.$$

declare -r SCRIPT_PATH=$( cd $(dirname ${BASH_SOURCE[0]}) > /dev/null; pwd -P )

# expect APP_DIR from env, otherwise same as where script is 
WORK_DIR=${APP_DIR:=$SCRIPT_PATH}

function usage() {
  cat <<EOF

Usage: $0
 -b build dir: Directory where files get created
 -c PotsgreSQL conenction string using mapserver syntax
 -d the internet domain url under which this instance will be accesible.
    By default http://localhost
 -h this help
EOF
}


# Single main function
function main() {
    
    #Parse command line flags If an option should be followed by an
    #argument, it should be followed by a ":".  Notice there is no ":"
    #after "h". The leading ":" suppresses error messages from
    #getopts. This is required to get unrecognized option code to
    #work.
    local -r OPTS=':hb:c:d:'
    
    declare -g BUILD_DIR=${WORK_DIR}/build
    declare -g PG_CONNECTION=""
    declare -gx DOMAIN_URL="http://localhost"
    
    while builtin getopts ${OPTS} opt "${@}"; do
	
	case $opt in
	    b) [[ -w "${OPTARG}" ]] || ex_err "Could not access directory ${OPTARG}";
	       declare -gr BUILD_DIR="${OPTARG}"
	       ;;
	    
	    c) #also exporting to env for envsubst
		declare -grx PG_CONNECTION=${OPTARG}
		[[ -n ${OPTARG} ]] \
		    || ex_err "You have to define PostgreSQL database conenction using same syntax as mapserver requires"
		;;
	    d) declare -grx DOMAIN_URL=${OPTARG}
	       [[ -n ${OPTARG} ]] \
		   || ex_err "You have to define the domain url"
		;;
	    
	    h) usage ; exit 0
	       ;;
	    
	    \?)
		echo ${opt} ${OPTIND} 'is an invalid option' >&2 ;
		usage;
		exit ${INVALID_OPTION}
		;;
	    
            :)
		echo 'required argument not found for option -'${OPTARG} >&2;
		usage;
		exit ${INVALID_OPTION}
		;;
            *) echo "Too many options. Can not happen actually :)"
               ;;
 	    
	esac
    done

    [[ -n ${PG_CONNECTION} ]] || ex_err "You have to define PostgreSQL database conenction using same syntax as mapserver requires";
    
    mkdir -p ${BUILD_DIR}
    
    #rsync -zvr data  "${BUILD_DIR}"/data
    
    cp -R etc/ layer/ template/ doc-root/ "${BUILD_DIR}"

    envsubst < postgis-connection.inc > "${BUILD_DIR}"/postgis-connection.inc

    echo "url=${DOMAIN_URL}"
    for file in *.map; do
	envsubst < "${file}" > "${BUILD_DIR}"/"${file}"
    done

    
    cleanup
    
    exit 0
}


# set a trap for (calling) cleanup all stuff before process
# termination by SIGHUBs
trap "cleanup; exit 1" 1 2 3 13 15
# this is the main executable function at end of script
main "$@"
